#include "../s21_string.h"
#include <string.h>
#test strtok_1
  char s1[] = "Hello,-! world!";
  char s2[] = "Hello,-! world!";
  char s3[] = "!-";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));
#test strtok_2
  char s1[] = "";
  char s2[] = "";
  char s3[] = "";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));
#test strtok_3
  char s1[] = "Hello, world!";
  char s2[] = "Hello, world!";
  char s3[] = "\0";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));
#test strtok_4
  char s1[] = "Hello, world!";
  char s2[] = "Hello, world!";
  char s3[] = "";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));
#test strtok_5
  char s1[] = "Hello, world!";
  char s2[] = "Hello, world!";
  char s3[] = "Hello, world!";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));
#test strtok_6
  char s1[] = "Hello, world!";
  char s2[] = "Hello, world!";
  char s3[] = "My name is JULIYA-MAF.";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));
#test strtok_7
  char s1[] = "hehehehehehehB";
  char s2[] = "hehehehehehehB";
  char s3[] = "B";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));
#test strtok_8
  char s1[] = "\nAhehehehehehehB";
  char s2[] = "\nAhehehehehehehB";
  char s3[] = "A";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));
#test strtok_9
  char s1[] = "\0Hello, world!";
  char s2[] = "\0Hello, world!";
  char s3[] = "\0";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));
#test strtok_10
  char s1[] = "\0Hello, world!";
  char s2[] = "\0Hello, world!";
  char s3[] = "";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));
#test strtok_11
  char s1[] = "test string";
  char s2[] = "test string";
  char s3[] = " ";
  char *token1 = strtok(s1, s3);
  char *token2 = s21_strtok(s2, s3);
  ck_assert_str_eq(token1, token2);
#test strtok_12
  char s1[] = "maf maf = maf";
  char s2[] = "maf maf = maf";
  char s3[] = "maf = maf";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));
#test strtok_13
  char s1[] = "Hello,       world! And other people";
  char s2[] = "Hello,       world! And other people";
  char s3[] = "Come here";
  char s4[] = "Come here";
  char s5[] = "e";
  ck_assert_pstr_eq(strtok(s1, s5), s21_strtok(s2, s5));
  for (int i = 0; i < 5; i++) {
    ck_assert_pstr_eq(strtok(S21_NULL, s5), s21_strtok(S21_NULL, s5));
  }
  ck_assert_pstr_eq(strtok(s3, s5), s21_strtok(s4, s5));
  ck_assert_pstr_eq(strtok(S21_NULL, s5), s21_strtok(S21_NULL, s5));
  ck_assert_pstr_eq(strtok(S21_NULL, s5), s21_strtok(S21_NULL, s5));
#test strtok_14
  char s1[] = "Hello,      worllllllllllld! And lother people      ";
  char s2[] = "Hello,      worllllllllllld! And lother people      ";
  char s3[] = "Come here";
  char s4[] = "Come here";
  char s5[] = " l";
  ck_assert_pstr_eq(strtok(s1, s5), s21_strtok(s2, s5));
  for (int i = 0; i < 5; i++) {
    ck_assert_pstr_eq(strtok(S21_NULL, s5), s21_strtok(S21_NULL, s5));
  }
  ck_assert_pstr_eq(strtok(s3, s5), s21_strtok(s4, s5));
  ck_assert_pstr_eq(strtok(S21_NULL, s5), s21_strtok(S21_NULL, s5));
  ck_assert_pstr_eq(strtok(S21_NULL, s5), s21_strtok(S21_NULL, s5));
#test strtok_15
  char s1[] = "Helllllllo,      worllllllllllld! And lother people      ";
  char s2[] = "Helllllllo,      worllllllllllld! And lother people      ";
  char s3[] = "Come here";
  char s4[] = "Come here";
  char s5[] = "l";
  char s6[] = " ";
  ck_assert_str_eq(strtok(s1, s5), s21_strtok(s2, s5));
  for (int i = 0; i < 5; i++) {
    ck_assert_pstr_eq(strtok(S21_NULL, s6), s21_strtok(S21_NULL, s6));
  }
  ck_assert_pstr_eq(strtok(s3, s6), s21_strtok(s4, s6));
  ck_assert_pstr_eq(strtok(S21_NULL, s6), s21_strtok(S21_NULL, s6));
  ck_assert_pstr_eq(strtok(S21_NULL, s6), s21_strtok(S21_NULL, s6));
#test strtok_16
  char s1[] = "RIM AMD ROM!!";
  char s2[] = "RIM AMD ROM!!";
  char s3[] = "R";
  strtok(s1, s3);
  strtok(NULL, s3);
  s21_strtok(s2, s3);
  s21_strtok(NULL, s3);
  ck_assert_pstr_eq(s1, s2);
#test strtok_17
  char s1[] = "ASFERIKA";
  char s2[] = "ASFERIKA";
  char s3[] = "A";
  strtok(s1, s3);
  strtok(NULL, s3);
  strtok(NULL, s3);
  s21_strtok(s2, s3);
  s21_strtok(NULL, s3);
  s21_strtok(NULL, s3);
  ck_assert_pstr_eq(s1, s2);
#test strtok_18
  char s1[] = "hrom brom maf";
  char s2[] = "hrom brom maf";
  char s3[] = "hrom bro";
  char *s4 = strtok(s1, s3);
  char *s6 = strtok(S21_NULL, s3);
  char *s5 = s21_strtok(s2, s3);
  char *s7 = s21_strtok(S21_NULL, s3);
  ck_assert_pstr_eq(s1, s2);
  ck_assert_pstr_eq(s4, s5);
  ck_assert_pstr_eq(s6, s7);
#test strtok_19
  char s1[] = "AAAAAAAGGGGGHHHHH";
  char s2[] = "AAAAAAAGGGGGHHHHH";
  char s3[] = "A";
  strtok(s1, s3);
  strtok(NULL, s2);
  strtok(NULL, s2);
  s21_strtok(s2, s3);
  s21_strtok(NULL, s3);
  s21_strtok(NULL, s3);
  ck_assert_pstr_eq(s1, s2);
#test strtok_20
    char* s1 = (char*)malloc(sizeof(char) * (strlen("one,two,three") + 1));
    char* s2 = (char*)malloc(sizeof(char) * (strlen("one,two,three") + 1));
    char* delim = ",";

    if (s1 != NULL && s2 != NULL) {
        strcpy(s1, "one,two,three");
        strcpy(s2, "one,two,three");

        char* expected = strtok(s1, delim);
        char* actual = s21_strtok(s2, delim);

        while (expected != NULL || actual != NULL) {
            ck_assert_pstr_eq(expected, actual);
            expected = strtok(NULL, delim);
            actual = s21_strtok(NULL, delim);
        }
        free(s1);
        free(s2);
    }
#test strtok_21
    char* s1 = (char*)malloc(sizeof(char) * (strlen("  leading and trailing spaces  ") + 1));
    char* s2 = (char*)malloc(sizeof(char) * (strlen("  leading and trailing spaces  ") + 1));
    char* delim = " ";
    if(s1 != NULL && s2 != NULL) {
        strcpy(s1, "  leading and trailing spaces  ");
        strcpy(s2, "  leading and trailing spaces  ");

        char* expected = strtok(s1, delim);
        char* actual = s21_strtok(s2, delim);

        while (expected != NULL || actual != NULL) {
           ck_assert_pstr_eq(expected, actual);
            expected = strtok(NULL, delim);
            actual = s21_strtok(NULL, delim);
        }
        free(s1);
        free(s2);
    }