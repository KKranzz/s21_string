#include "../s21_string.h"
#include <string.h>
#test strncat_1
  char s1[30] = "Hello, world!";
  char s2[30] = "Hello, world!";
  char s3[] = "Hello, world!";
  s21_size_t n = 1;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_2
  char s1[30] = "Hello, world!";
  char s2[30] = "Hello, world!";
  char s3[] = "\0";
  s21_size_t n = 1;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_3
  char s1[30] = "MAF MAF MAF GAV";
  char s2[30] = "MAF MAF MAF GAV";
  char s3[] = "\n\0\\d\f\\g\7";
  s21_size_t n = 3;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_4
  char s1[30] = "MAF MAF MAF GAV";
  char s2[30] = "MAF MAF MAF GAV";
  char s3[] = "";
  s21_size_t n = 0;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_5
  char s1[30] = "";
  char s2[30] = "";
  char s3[] = "Hello, world!";
  s21_size_t n = 13;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_6
  char s1[100] = "Hello, world!";
  char s2[100] = "Hello, world!";
  char s3[] = "DHDHDHDH DHDHDHD HDHDHDHHD SJSJSJ.";
  s21_size_t n = 6;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_7
  char s1[30] = "";
  char s2[30] = "";
  char s3[] = "Hello, world!";
  s21_size_t n = 3;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_8
  char s1[100] = "Hello, world!";
  char s2[100] = "Hello, world!";
  char s3[] = "My name is DUDE.";
  s21_size_t n = 2;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_9
  char s1[100] = "";
  char s2[100] = "";
  char s3[] = "";
  s21_size_t n = 10;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_10
  char s1[100] = "Hello\0, world!";
  char s2[100] = "Hello\0, world!";
  char s3[] = "My name is\0 DUDE.";
  s21_size_t n = 15;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_11
  char s1[100] = "Hello, world!";
  char s2[100] = "Hello, world!";
  char s3[] = "\0";
  s21_size_t n = 1;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_12
  char s1[100] = "Hello, world!";
  char s2[100] = "Hello, world!";
  char s3[] = "\0";
  s21_size_t n = 0;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_13
  char s1[100] = "Hello, world!";
  char s2[100] = "Hello, world!";
  char s3[] = "\0\0\0\0";
  s21_size_t n = 4;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_14
  char s1[100] = "Hello, world!";
  char s2[100] = "Hello, world!";
  char s3[] = "";
  s21_size_t n = 2;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_15
  char s1[100] = "Hello, world!\0\0\0";
  char s2[100] = "Hello, world!\0\0\0";
  char s3[] = "My name is DUDE.";
  s21_size_t n = 0;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
#test strncat_16
  char *s1 = (char*)malloc(50 * sizeof(char));
  char *s2 = (char*)malloc(50 * sizeof(char));
  char s3[] = " Append me!";
  s21_size_t n = 11;
  if (s1 != NULL && s2 != NULL) {
    strcpy(s1, "Initial text.");
    strcpy(s2, "Initial text.");
    ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
    free(s1);
    free(s2);
  }
#test strncat_17
    char *s1 = (char*)malloc(20 * sizeof(char));
    char *s2 = (char*)malloc(20 * sizeof(char));
    char *s3 = (char*)malloc(10 * sizeof(char));
      s21_size_t n = 5;

    if (s1 != NULL && s2 != NULL && s3 != NULL) {
      strcpy(s1, "Start");
      strcpy(s2, "Start");
      strcpy(s3, "123456789");

      ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));
        free(s1);
        free(s2);
        free(s3);
    }